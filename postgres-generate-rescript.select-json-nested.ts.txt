import pg from 'pg';

export type SelectJsonNestedResult = {
	payload: SelectJsonNestedPayloadType;
	items: SelectJsonNestedItemsType[];
}

export type SelectJsonNestedPayloadType = {
	user: SelectJsonNestedPayloadUserType;
	tags: string[];
	meta: SelectJsonNestedPayloadMetaType;
}

export type SelectJsonNestedPayloadUserType = {
	id: int;
	name: string;
	address: SelectJsonNestedPayloadUserAddressType;
}

export type SelectJsonNestedPayloadUserAddressType = {
	city: string;
	zip: string;
}

export type SelectJsonNestedPayloadMetaType = {
	active: bool;
	scores: int[];
}

export type SelectJsonNestedItemsType = {
	id: int;
}

export type SelectJsonNestedItemsType = {
	id: int;
	children: SelectJsonNestedItemsChildrenType[];
}

export type SelectJsonNestedItemsChildrenType = {
	id: int;
}

export async function selectJsonNested(client: pg.Client | pg.Pool | pg.PoolClient): Promise<SelectJsonNestedResult | null> {
	const sql = `
	SELECT
		json_build_object(
		  'user', json_build_object(
		    'id', 1,
		    'name', 'Alice',
		    'address', json_build_object('city', 'NYC', 'zip', '10001')
		  ),
		  'tags', json_build_array('a', 'b', 'c'),
		  'meta', json_build_object('active', true, 'scores', json_build_array(1, 2, 3))
		) as payload,
		json_build_array(
		  json_build_object('id', 1),
		  json_build_object('id', 2, 'children', json_build_array(json_build_object('id', 3)))
		) as items
	`
	return client.query({ text: sql, rowMode: 'array' })
		.then(res => res.rows.length > 0 ? mapArrayToSelectJsonNestedResult(res.rows[0]) : null);
}

function mapArrayToSelectJsonNestedResult(data: any) {
	const result: SelectJsonNestedResult = {
		payload: data[0],
		items: data[1]
	}
	return result;
}