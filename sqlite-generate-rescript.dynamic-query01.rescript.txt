@@warning("-30")
type rec dynamicQuery01DynamicParams = {
	select?: dynamicQuery01Select,
	params?: dynamicQuery01Params,
	where?: array<dynamicQuery01Where>
}
and dynamicQuery01Params = {
	name?: Null.t<string>,
	description?: Null.t<string>
}
and dynamicQuery01Result = {
	id: option<int>,
	value: option<int>,
	name: option<string>,
	description: option<string>
}
and dynamicQuery01Select = {
	id: option<bool>,
	value: option<bool>,
	name: option<bool>,
	description: option<bool>
}
and numericOperator = unknown
and stringOperator = [#"=" | #"<>" | #">" | #"<" | #">=" | #"<=" | #"LIKE"]
and setOperator = [#"IN" | #"NOT IN"]
and betweenOperator = [#"BETWEEN"]
and dynamicQuery01Where = unknown /* any */

%%raw("function mapArrayToDynamicQuery01Result(data, select) {
    const result = {};
    let rowIndex = -1;
    if (select == null || select.id) {
        rowIndex++;
        result.id = data[rowIndex];
    }
    if (select == null || select.value) {
        rowIndex++;
        result.value = data[rowIndex];
    }
    if (select == null || select.name) {
        rowIndex++;
        result.name = data[rowIndex];
    }
    if (select == null || select.description) {
        rowIndex++;
        result.description = data[rowIndex];
    }
    return result;
}")

%%raw("function appendSelect(sql, selectField) {
    if (sql.toUpperCase().endsWith('SELECT')) {
        return sql + EOL + selectField;
    }
    else {
        return sql + ', ' + EOL + selectField;
    }
}")

%%raw("function whereConditionsToObject(whereConditions) {
    const obj = {};
    whereConditions?.forEach(condition => {
        const where = whereCondition(condition);
        if (where?.hasValue) {
            obj[condition[0]] = true;
        }
    });
    return obj;
}")

%%raw("function whereCondition(condition) {
    const selectFragment = selectFragments[condition[0]];
    const operator = condition[1];
    if (operator == 'LIKE') {
        return {
            sql: `${selectFragment} LIKE concat('%', ?, '%')`,
            hasValue: condition[2] != null,
            values: [condition[2]]
        };
    }
    if (operator == 'BETWEEN') {
        return {
            sql: `${selectFragment} BETWEEN ? AND ?`,
            hasValue: condition[2] != null && condition[3] != null,
            values: [condition[2], condition[3]]
        };
    }
    if (operator == 'IN' || operator == 'NOT IN') {
        return {
            sql: `${selectFragment} ${operator} (${condition[2]?.map(_ => '?').join(', ')})`,
            hasValue: condition[2] != null && condition[2].length > 0,
            values: condition[2]
        };
    }
    if (NumericOperatorList.includes(operator)) {
        return {
            sql: `${selectFragment} ${operator} ?`,
            hasValue: condition[2] != null,
            values: [condition[2]]
        };
    }
    return undefined;
}")

let run: (BetterSqlite3.client, dynamicQuery01DynamicParams) => array<dynamicQuery01Result> = %raw("(function dynamicQuery01(db, params) {
    const where = whereConditionsToObject(params?.where);
    const paramsValues = [];
    let sql = 'SELECT';
    if (params?.select == null || params.select.id) {
        sql = appendSelect(sql, `m1.id`);
    }
    if (params?.select == null || params.select.value) {
        sql = appendSelect(sql, `m1.value`);
    }
    if (params?.select == null || params.select.name) {
        sql = appendSelect(sql, `m2.name`);
    }
    if (params?.select == null || params.select.description) {
        sql = appendSelect(sql, `m2.descr as description`);
    }
    sql += EOL + `FROM mytable1 m1`;
    sql += EOL + `INNER JOIN mytable2 m2 on m1.id = m2.id`;
    sql += EOL + `WHERE 1 = 1`;
    sql += EOL + `AND m2.name = ?
AND m2.descr = ?`;
    paramsValues.push(params?.params?.name ?? null);
    paramsValues.push(params?.params?.description ?? null);
    params?.where?.forEach(condition => {
        const where = whereCondition(condition);
        if (where?.hasValue) {
            sql += EOL + 'AND ' + where.sql;
            paramsValues.push(...where.values);
        }
    });
    return db.prepare(sql)
        .raw(true)
        .all(paramsValues)
        .map(data => mapArrayToDynamicQuery01Result(data, params?.select));
})")
